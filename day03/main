#!/usr/bin/env ruby

lines = $<.read.lines.take(2).map{ |line| line.chomp.split(",") }

a, b = lines.map do |directions|
  x, y = 0, 0
  out = []
  directions.each do |dir|
    steps = dir[1..].to_i
    case dir[0]
    when "R"
      out += steps.times.map { |i| [x + i, y] }
      x += steps
    when "L"
      out += steps.times.map { |i| [x - i, y] }
      x -= steps
    when "U"
      out += steps.times.map { |i| [x, y + i] }
      y += steps
    when "D"
      out += steps.times.map { |i| [x, y - i] }
      y -= steps
    end
  end
  out[1..] # Skip (0,0)
end

intersections = (a & b)
puts "Part 1"
puts intersections.map { |point| point[0].abs + point[1].abs }.min
puts "Part 2"
# Need to add 2 because we ignore the first step: (0,0)
puts intersections.map { |i| a.index(i) + b.index(i) }.min + 2
