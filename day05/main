#!/usr/bin/env ruby

input = $<.read.split(",").map(&:to_i)

ADD = 1
MUL = 2
READ = 3
WRITE = 4
JUMP_IF_TRUE = 5
JUMP_IF_FALSE = 6
LESS_THAN = 7
EQUALS = 8
HALT = 99

def modes(m1=0, m2=0)
  [m1, m2]
end

def get_params(program, idx)
  m1, m2 = modes(*program[idx].digits[2, 2])
  a, b, c = program[idx + 1, 3]
  a = program[a] if m1.zero?
  b = program[b] if m2.zero?
  [a, b, c] # c is always read as a value
end

def apply_intcode(program, idx, &op)
  a, b, c = get_params(program, idx)
  program[c] = op.(a, b)
end

def intcode_computer(program, input)
  program = program.clone
  output = []
  idx = 0
  loop do
    case program[idx] % 100
    when ADD
      apply_intcode(program, idx, &:+)
      idx += 4
    when MUL
      apply_intcode(program, idx, &:*)
      idx += 4
    when READ
      program[program[idx + 1]] = input
      idx += 2
    when WRITE
      output << program[program[idx + 1]]
      idx += 2
    when JUMP_IF_TRUE
      a, b = get_params(program, idx)
      idx = a != 0 ? b : idx + 3
    when JUMP_IF_FALSE
      a, b = get_params(program, idx)
      idx = a.zero? ? b : idx + 3
    when LESS_THAN
      a, b, c = get_params(program, idx)
      program[c] = a < b ? 1 : 0
      idx += 4
    when EQUALS
      a, b, c = get_params(program, idx)
      program[c] = a == b ? 1 : 0
      idx += 4
    when HALT
      output << HALT
      return output
    else
      puts "Program failed"
      return nil
    end
  end
end

puts "Part 1"
puts intcode_computer(input, 1)[-2]

puts "Part 2"
puts intcode_computer(input, 5)[-2]
