#!/usr/bin/env ruby

require_relative "../common/intcode_machine"
require "set"

input = $<.read.chomp.split(",").map(&:to_i)

def paint_panel(input, start_on_white = false)
  im = IntcodeMachine.new(input)
  least_once = Set.new
  dir, x, y = 0, 50, 50
  image = Array.new(100) { Array.new(100, 0) }
  image[x][y] = 1 if start_on_white

  while !im.halted?
    paint = im.run(image[y][x])
    next if paint.nil?
    least_once << [x, y]
    image[y][x] = paint
    if im.run.zero? # Turn left (0) or right (1)
      dir = (dir - 1) % 4
    else
      dir = (dir + 1) % 4
    end

    case dir
    when 0 then y += 1
    when 1 then x += 1
    when 2 then y -= 1
    when 3 then x -= 1
    end
  end

  { unique_paint_count: least_once.size, image: image }
end

puts "Part 1"
puts paint_panel(input)[:unique_paint_count]
puts "Part 2"
paint_panel(input, true)[:image].reverse.each do |a|
  puts a.map { |i| i.zero? ? " " : "#" }.join.inspect
end
